
import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class IdemLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly Self = 2;
    public static readonly In = 3;
    public static readonly Null = 4;
    public static readonly Today = 5;
    public static readonly Yesterday = 6;
    public static readonly Tomorrow = 7;
    public static readonly Or = 8;
    public static readonly And = 9;
    public static readonly Equals = 10;
    public static readonly NEquals = 11;
    public static readonly GTEquals = 12;
    public static readonly LTEquals = 13;
    public static readonly Pow = 14;
    public static readonly Excl = 15;
    public static readonly GT = 16;
    public static readonly LT = 17;
    public static readonly Add = 18;
    public static readonly Subtract = 19;
    public static readonly Multiply = 20;
    public static readonly Divide = 21;
    public static readonly Modulus = 22;
    public static readonly OBracket = 23;
    public static readonly CBracket = 24;
    public static readonly OParen = 25;
    public static readonly CParen = 26;
    public static readonly SColon = 27;
    public static readonly Assign = 28;
    public static readonly Comma = 29;
    public static readonly QMark = 30;
    public static readonly Colon = 31;
    public static readonly Bool = 32;
    public static readonly Identifier = 33;
    public static readonly Number = 34;
    public static readonly String = 35;
    public static readonly LocalDate = 36;
    public static readonly Timestamp = 37;
    public static readonly Time = 38;
    public static readonly DatePart = 39;
    public static readonly Space = 40;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'.'", "'self'", "'in'", "'null'", "'today'", "'yesterday'", 
        "'tomorrow'", "'||'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'^'", 
        "'!'", "'>'", "'<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'['", "']'", 
        "'('", "')'", "';'", "'='", "','", "'?'", "':'"
    ];

    public static readonly symbolicNames = [
        null, null, "Self", "In", "Null", "Today", "Yesterday", "Tomorrow", 
        "Or", "And", "Equals", "NEquals", "GTEquals", "LTEquals", "Pow", 
        "Excl", "GT", "LT", "Add", "Subtract", "Multiply", "Divide", "Modulus", 
        "OBracket", "CBracket", "OParen", "CParen", "SColon", "Assign", 
        "Comma", "QMark", "Colon", "Bool", "Identifier", "Number", "String", 
        "LocalDate", "Timestamp", "Time", "DatePart", "Space"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "Self", "In", "Null", "Today", "Yesterday", "Tomorrow", 
        "Or", "And", "Equals", "NEquals", "GTEquals", "LTEquals", "Pow", 
        "Excl", "GT", "LT", "Add", "Subtract", "Multiply", "Divide", "Modulus", 
        "OBracket", "CBracket", "OParen", "CParen", "SColon", "Assign", 
        "Comma", "QMark", "Colon", "Bool", "Identifier", "Number", "String", 
        "LocalDate", "Timestamp", "Time", "DatePart", "Space", "Int", "Digit",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, IdemLexer._ATN, IdemLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Idem.g4"; }

    public get literalNames(): (string | null)[] { return IdemLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return IdemLexer.symbolicNames; }
    public get ruleNames(): string[] { return IdemLexer.ruleNames; }

    public get serializedATN(): number[] { return IdemLexer._serializedATN; }

    public get channelNames(): string[] { return IdemLexer.channelNames; }

    public get modeNames(): string[] { return IdemLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,40,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,189,8,31,1,32,1,
        32,5,32,193,8,32,10,32,12,32,196,9,32,1,33,1,33,1,33,5,33,201,8,
        33,10,33,12,33,204,9,33,3,33,206,8,33,1,34,1,34,1,34,1,34,1,34,1,
        34,5,34,214,8,34,10,34,12,34,217,9,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,5,34,226,8,34,10,34,12,34,229,9,34,1,34,3,34,232,8,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,3,37,265,8,37,1,38,1,38,3,38,269,8,38,1,39,
        1,39,1,39,1,39,1,40,1,40,5,40,277,8,40,10,40,12,40,280,9,40,1,40,
        3,40,283,8,40,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        0,83,0,1,0,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,34,34,3,0,10,10,13,13,34,34,1,0,39,39,3,0,10,10,13,13,39,39,
        8,0,68,68,77,77,87,87,89,89,100,100,109,109,119,119,121,121,3,0,
        9,10,12,13,32,32,1,0,49,57,1,0,48,57,297,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,0,5,
        92,1,0,0,0,7,95,1,0,0,0,9,100,1,0,0,0,11,106,1,0,0,0,13,116,1,0,
        0,0,15,125,1,0,0,0,17,128,1,0,0,0,19,131,1,0,0,0,21,134,1,0,0,0,
        23,137,1,0,0,0,25,140,1,0,0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,147,
        1,0,0,0,33,149,1,0,0,0,35,151,1,0,0,0,37,153,1,0,0,0,39,155,1,0,
        0,0,41,157,1,0,0,0,43,159,1,0,0,0,45,161,1,0,0,0,47,163,1,0,0,0,
        49,165,1,0,0,0,51,167,1,0,0,0,53,169,1,0,0,0,55,171,1,0,0,0,57,173,
        1,0,0,0,59,175,1,0,0,0,61,177,1,0,0,0,63,188,1,0,0,0,65,190,1,0,
        0,0,67,197,1,0,0,0,69,231,1,0,0,0,71,233,1,0,0,0,73,244,1,0,0,0,
        75,255,1,0,0,0,77,266,1,0,0,0,79,270,1,0,0,0,81,282,1,0,0,0,83,284,
        1,0,0,0,85,86,5,46,0,0,86,2,1,0,0,0,87,88,5,115,0,0,88,89,5,101,
        0,0,89,90,5,108,0,0,90,91,5,102,0,0,91,4,1,0,0,0,92,93,5,105,0,0,
        93,94,5,110,0,0,94,6,1,0,0,0,95,96,5,110,0,0,96,97,5,117,0,0,97,
        98,5,108,0,0,98,99,5,108,0,0,99,8,1,0,0,0,100,101,5,116,0,0,101,
        102,5,111,0,0,102,103,5,100,0,0,103,104,5,97,0,0,104,105,5,121,0,
        0,105,10,1,0,0,0,106,107,5,121,0,0,107,108,5,101,0,0,108,109,5,115,
        0,0,109,110,5,116,0,0,110,111,5,101,0,0,111,112,5,114,0,0,112,113,
        5,100,0,0,113,114,5,97,0,0,114,115,5,121,0,0,115,12,1,0,0,0,116,
        117,5,116,0,0,117,118,5,111,0,0,118,119,5,109,0,0,119,120,5,111,
        0,0,120,121,5,114,0,0,121,122,5,114,0,0,122,123,5,111,0,0,123,124,
        5,119,0,0,124,14,1,0,0,0,125,126,5,124,0,0,126,127,5,124,0,0,127,
        16,1,0,0,0,128,129,5,38,0,0,129,130,5,38,0,0,130,18,1,0,0,0,131,
        132,5,61,0,0,132,133,5,61,0,0,133,20,1,0,0,0,134,135,5,33,0,0,135,
        136,5,61,0,0,136,22,1,0,0,0,137,138,5,62,0,0,138,139,5,61,0,0,139,
        24,1,0,0,0,140,141,5,60,0,0,141,142,5,61,0,0,142,26,1,0,0,0,143,
        144,5,94,0,0,144,28,1,0,0,0,145,146,5,33,0,0,146,30,1,0,0,0,147,
        148,5,62,0,0,148,32,1,0,0,0,149,150,5,60,0,0,150,34,1,0,0,0,151,
        152,5,43,0,0,152,36,1,0,0,0,153,154,5,45,0,0,154,38,1,0,0,0,155,
        156,5,42,0,0,156,40,1,0,0,0,157,158,5,47,0,0,158,42,1,0,0,0,159,
        160,5,37,0,0,160,44,1,0,0,0,161,162,5,91,0,0,162,46,1,0,0,0,163,
        164,5,93,0,0,164,48,1,0,0,0,165,166,5,40,0,0,166,50,1,0,0,0,167,
        168,5,41,0,0,168,52,1,0,0,0,169,170,5,59,0,0,170,54,1,0,0,0,171,
        172,5,61,0,0,172,56,1,0,0,0,173,174,5,44,0,0,174,58,1,0,0,0,175,
        176,5,63,0,0,176,60,1,0,0,0,177,178,5,58,0,0,178,62,1,0,0,0,179,
        180,5,116,0,0,180,181,5,114,0,0,181,182,5,117,0,0,182,189,5,101,
        0,0,183,184,5,102,0,0,184,185,5,97,0,0,185,186,5,108,0,0,186,187,
        5,115,0,0,187,189,5,101,0,0,188,179,1,0,0,0,188,183,1,0,0,0,189,
        64,1,0,0,0,190,194,7,0,0,0,191,193,7,1,0,0,192,191,1,0,0,0,193,196,
        1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,66,1,0,0,0,196,194,1,
        0,0,0,197,205,3,81,40,0,198,202,5,46,0,0,199,201,3,83,41,0,200,199,
        1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,206,
        1,0,0,0,204,202,1,0,0,0,205,198,1,0,0,0,205,206,1,0,0,0,206,68,1,
        0,0,0,207,215,7,2,0,0,208,214,8,3,0,0,209,210,5,92,0,0,210,214,5,
        92,0,0,211,212,5,92,0,0,212,214,5,34,0,0,213,208,1,0,0,0,213,209,
        1,0,0,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,232,7,2,0,0,219,227,
        7,4,0,0,220,226,8,5,0,0,221,222,5,92,0,0,222,226,5,92,0,0,223,224,
        5,92,0,0,224,226,5,39,0,0,225,220,1,0,0,0,225,221,1,0,0,0,225,223,
        1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,
        1,0,0,0,229,227,1,0,0,0,230,232,7,4,0,0,231,207,1,0,0,0,231,219,
        1,0,0,0,232,70,1,0,0,0,233,234,3,83,41,0,234,235,3,83,41,0,235,236,
        3,83,41,0,236,237,3,83,41,0,237,238,5,45,0,0,238,239,3,83,41,0,239,
        240,3,83,41,0,240,241,5,45,0,0,241,242,3,83,41,0,242,243,3,83,41,
        0,243,72,1,0,0,0,244,245,3,71,35,0,245,246,5,84,0,0,246,247,3,83,
        41,0,247,248,3,83,41,0,248,249,5,58,0,0,249,250,3,83,41,0,250,251,
        3,83,41,0,251,252,5,58,0,0,252,253,3,83,41,0,253,254,3,83,41,0,254,
        74,1,0,0,0,255,256,3,83,41,0,256,257,3,83,41,0,257,258,5,58,0,0,
        258,259,3,83,41,0,259,264,3,83,41,0,260,261,5,58,0,0,261,262,3,83,
        41,0,262,263,3,83,41,0,263,265,1,0,0,0,264,260,1,0,0,0,264,265,1,
        0,0,0,265,76,1,0,0,0,266,268,3,67,33,0,267,269,7,6,0,0,268,267,1,
        0,0,0,269,78,1,0,0,0,270,271,7,7,0,0,271,272,1,0,0,0,272,273,6,39,
        0,0,273,80,1,0,0,0,274,278,7,8,0,0,275,277,3,83,41,0,276,275,1,0,
        0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,283,1,0,
        0,0,280,278,1,0,0,0,281,283,5,48,0,0,282,274,1,0,0,0,282,281,1,0,
        0,0,283,82,1,0,0,0,284,285,7,9,0,0,285,84,1,0,0,0,14,0,188,194,202,
        205,213,215,225,227,231,264,268,278,282,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!IdemLexer.__ATN) {
            IdemLexer.__ATN = new antlr.ATNDeserializer().deserialize(IdemLexer._serializedATN);
        }

        return IdemLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(IdemLexer.literalNames, IdemLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return IdemLexer.vocabulary;
    }

    private static readonly decisionsToDFA = IdemLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}
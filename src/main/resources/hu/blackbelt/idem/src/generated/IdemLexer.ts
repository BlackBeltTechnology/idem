
import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class IdemLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly Identifier = 3;
    public static readonly Or = 4;
    public static readonly And = 5;
    public static readonly Equals = 6;
    public static readonly NEquals = 7;
    public static readonly GTEquals = 8;
    public static readonly LTEquals = 9;
    public static readonly Pow = 10;
    public static readonly Excl = 11;
    public static readonly GT = 12;
    public static readonly LT = 13;
    public static readonly Add = 14;
    public static readonly Subtract = 15;
    public static readonly Multiply = 16;
    public static readonly Divide = 17;
    public static readonly Modulus = 18;
    public static readonly OBracket = 19;
    public static readonly CBracket = 20;
    public static readonly OParen = 21;
    public static readonly CParen = 22;
    public static readonly SColon = 23;
    public static readonly Assign = 24;
    public static readonly Comma = 25;
    public static readonly QMark = 26;
    public static readonly Colon = 27;
    public static readonly Bool = 28;
    public static readonly Number = 29;
    public static readonly String = 30;
    public static readonly LocalDate = 31;
    public static readonly DatePart = 32;
    public static readonly Space = 33;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'self'", "'.'", null, "'||'", "'&&'", "'=='", "'!='", "'>='", 
        "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", "'*'", "'/'", 
        "'%'", "'['", "']'", "'('", "')'", "';'", "'='", "','", "'?'", "':'"
    ];

    public static readonly symbolicNames = [
        null, null, null, "Identifier", "Or", "And", "Equals", "NEquals", 
        "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", 
        "Multiply", "Divide", "Modulus", "OBracket", "CBracket", "OParen", 
        "CParen", "SColon", "Assign", "Comma", "QMark", "Colon", "Bool", 
        "Number", "String", "LocalDate", "DatePart", "Space"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "Identifier", "Or", "And", "Equals", "NEquals", 
        "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", 
        "Multiply", "Divide", "Modulus", "OBracket", "CBracket", "OParen", 
        "CParen", "SColon", "Assign", "Comma", "QMark", "Colon", "Bool", 
        "Number", "String", "LocalDate", "DatePart", "Space", "Int", "Dot", 
        "Digit", "Char", "Underscore", "Empty", "Unicode",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, IdemLexer._ATN, IdemLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Idem.g4"; }

    public get literalNames(): (string | null)[] { return IdemLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return IdemLexer.symbolicNames; }
    public get ruleNames(): string[] { return IdemLexer.ruleNames; }

    public get serializedATN(): number[] { return IdemLexer._serializedATN; }

    public get channelNames(): string[] { return IdemLexer.channelNames; }

    public get modeNames(): string[] { return IdemLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,33,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,3,2,92,8,2,1,2,1,
        2,1,2,1,2,5,2,98,8,2,10,2,12,2,101,9,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,3,27,166,8,27,1,28,1,28,1,28,5,28,171,8,28,10,28,12,28,
        174,9,28,3,28,176,8,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,184,8,
        29,10,29,12,29,187,9,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,
        196,8,29,10,29,12,29,199,9,29,1,29,3,29,202,8,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,3,31,217,8,31,
        1,32,1,32,1,32,1,32,1,33,1,33,5,33,225,8,33,10,33,12,33,228,9,33,
        1,33,3,33,231,8,33,1,34,1,34,1,35,1,35,1,36,3,36,238,8,36,1,37,1,
        37,1,38,1,38,1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,0,69,0,71,0,73,0,75,0,77,0,79,0,1,0,9,1,0,34,
        34,3,0,10,10,13,13,34,34,1,0,39,39,3,0,10,10,13,13,39,39,8,0,68,
        68,77,77,87,87,89,89,100,100,109,109,119,119,121,121,3,0,9,10,12,
        13,32,32,1,0,49,57,1,0,48,57,2,0,65,90,97,122,255,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,1,81,1,0,0,0,3,86,1,0,0,0,5,91,1,0,0,0,7,102,
        1,0,0,0,9,105,1,0,0,0,11,108,1,0,0,0,13,111,1,0,0,0,15,114,1,0,0,
        0,17,117,1,0,0,0,19,120,1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,
        126,1,0,0,0,27,128,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,0,33,134,
        1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,140,1,0,0,0,41,142,1,0,
        0,0,43,144,1,0,0,0,45,146,1,0,0,0,47,148,1,0,0,0,49,150,1,0,0,0,
        51,152,1,0,0,0,53,154,1,0,0,0,55,165,1,0,0,0,57,167,1,0,0,0,59,201,
        1,0,0,0,61,203,1,0,0,0,63,214,1,0,0,0,65,218,1,0,0,0,67,230,1,0,
        0,0,69,232,1,0,0,0,71,234,1,0,0,0,73,237,1,0,0,0,75,239,1,0,0,0,
        77,241,1,0,0,0,79,243,1,0,0,0,81,82,5,115,0,0,82,83,5,101,0,0,83,
        84,5,108,0,0,84,85,5,102,0,0,85,2,1,0,0,0,86,87,5,46,0,0,87,4,1,
        0,0,0,88,92,3,73,36,0,89,92,3,79,39,0,90,92,3,75,37,0,91,88,1,0,
        0,0,91,89,1,0,0,0,91,90,1,0,0,0,92,99,1,0,0,0,93,98,3,73,36,0,94,
        98,3,71,35,0,95,98,3,79,39,0,96,98,3,75,37,0,97,93,1,0,0,0,97,94,
        1,0,0,0,97,95,1,0,0,0,97,96,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,
        99,100,1,0,0,0,100,6,1,0,0,0,101,99,1,0,0,0,102,103,5,124,0,0,103,
        104,5,124,0,0,104,8,1,0,0,0,105,106,5,38,0,0,106,107,5,38,0,0,107,
        10,1,0,0,0,108,109,5,61,0,0,109,110,5,61,0,0,110,12,1,0,0,0,111,
        112,5,33,0,0,112,113,5,61,0,0,113,14,1,0,0,0,114,115,5,62,0,0,115,
        116,5,61,0,0,116,16,1,0,0,0,117,118,5,60,0,0,118,119,5,61,0,0,119,
        18,1,0,0,0,120,121,5,94,0,0,121,20,1,0,0,0,122,123,5,33,0,0,123,
        22,1,0,0,0,124,125,5,62,0,0,125,24,1,0,0,0,126,127,5,60,0,0,127,
        26,1,0,0,0,128,129,5,43,0,0,129,28,1,0,0,0,130,131,5,45,0,0,131,
        30,1,0,0,0,132,133,5,42,0,0,133,32,1,0,0,0,134,135,5,47,0,0,135,
        34,1,0,0,0,136,137,5,37,0,0,137,36,1,0,0,0,138,139,5,91,0,0,139,
        38,1,0,0,0,140,141,5,93,0,0,141,40,1,0,0,0,142,143,5,40,0,0,143,
        42,1,0,0,0,144,145,5,41,0,0,145,44,1,0,0,0,146,147,5,59,0,0,147,
        46,1,0,0,0,148,149,5,61,0,0,149,48,1,0,0,0,150,151,5,44,0,0,151,
        50,1,0,0,0,152,153,5,63,0,0,153,52,1,0,0,0,154,155,5,58,0,0,155,
        54,1,0,0,0,156,157,5,116,0,0,157,158,5,114,0,0,158,159,5,117,0,0,
        159,166,5,101,0,0,160,161,5,102,0,0,161,162,5,97,0,0,162,163,5,108,
        0,0,163,164,5,115,0,0,164,166,5,101,0,0,165,156,1,0,0,0,165,160,
        1,0,0,0,166,56,1,0,0,0,167,175,3,67,33,0,168,172,5,46,0,0,169,171,
        3,71,35,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,
        1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,175,168,1,0,0,0,175,176,
        1,0,0,0,176,58,1,0,0,0,177,185,7,0,0,0,178,184,8,1,0,0,179,180,5,
        92,0,0,180,184,5,92,0,0,181,182,5,92,0,0,182,184,5,34,0,0,183,178,
        1,0,0,0,183,179,1,0,0,0,183,181,1,0,0,0,184,187,1,0,0,0,185,183,
        1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,202,
        7,0,0,0,189,197,7,2,0,0,190,196,8,3,0,0,191,192,5,92,0,0,192,196,
        5,92,0,0,193,194,5,92,0,0,194,196,5,39,0,0,195,190,1,0,0,0,195,191,
        1,0,0,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,
        1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,202,7,2,0,0,201,177,
        1,0,0,0,201,189,1,0,0,0,202,60,1,0,0,0,203,204,3,71,35,0,204,205,
        3,71,35,0,205,206,3,71,35,0,206,207,3,71,35,0,207,208,5,45,0,0,208,
        209,3,71,35,0,209,210,3,71,35,0,210,211,5,45,0,0,211,212,3,71,35,
        0,212,213,3,71,35,0,213,62,1,0,0,0,214,216,3,57,28,0,215,217,7,4,
        0,0,216,215,1,0,0,0,217,64,1,0,0,0,218,219,7,5,0,0,219,220,1,0,0,
        0,220,221,6,32,0,0,221,66,1,0,0,0,222,226,7,6,0,0,223,225,3,71,35,
        0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,
        0,227,231,1,0,0,0,228,226,1,0,0,0,229,231,5,48,0,0,230,222,1,0,0,
        0,230,229,1,0,0,0,231,68,1,0,0,0,232,233,5,46,0,0,233,70,1,0,0,0,
        234,235,7,7,0,0,235,72,1,0,0,0,236,238,7,8,0,0,237,236,1,0,0,0,238,
        74,1,0,0,0,239,240,5,95,0,0,240,76,1,0,0,0,241,242,5,32,0,0,242,
        78,1,0,0,0,243,244,2,192,65535,0,244,80,1,0,0,0,16,0,91,97,99,165,
        172,175,183,185,195,197,201,216,226,230,237,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!IdemLexer.__ATN) {
            IdemLexer.__ATN = new antlr.ATNDeserializer().deserialize(IdemLexer._serializedATN);
        }

        return IdemLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(IdemLexer.literalNames, IdemLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return IdemLexer.vocabulary;
    }

    private static readonly decisionsToDFA = IdemLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}